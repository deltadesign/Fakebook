{"version":3,"sources":["components/StatusCard.js","components/UpdateStatus.js","App.js","serviceWorker.js","index.js"],"names":["Status","props","state","Card","className","Title","this","username","Body","status","Row","Col","md","Button","variant","onClick","increaseLikes","decreaseLikes","likes","React","Component","Update","id","toastr","options","event","newState","target","name","value","setState","preventDefault","onpost","success","Form","onSubmit","e","submitHandler","Group","controlId","Control","type","placeholder","onChange","handleChange","required","App","posts","map","current","i","key","newPost","concat","localStorage","setItem","JSON","stringify","forEach","item","postsContents","getItem","parse","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","to","Container","path","updateStatus","exact","createposts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2386983.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Card from 'react-bootstrap/card'\r\nimport Button from 'react-bootstrap/button';\r\nimport Row from 'react-bootstrap/row';\r\nimport Col from 'react-bootstrap/col';\r\n\r\n\r\nclass Status extends React.Component{\r\n  constructor(props){\r\n  super(props)\r\n  this.state = {}\r\n  }\r\n\r\n  render(){\r\n  return (\r\n    <>\r\n    <Card className=\"status_card\">\r\n        <Card.Title>{this.props.username}</Card.Title>\r\n        <Card.Body>{this.props.status}</Card.Body>\r\n      <Row>\r\n        <Col md={11}>\r\n          {/* empty column */}\r\n        </Col>\r\n        <Col md={1}>\r\n          <div className=\"buttonbox\">\r\n            <Button variant = \"outline-success\" onClick = {() => this.props.increaseLikes()}>▲</Button>\r\n            <Button variant = \"outline-danger\" onClick = {() => this.props.decreaseLikes()}>▼</Button>\r\n            <div className=\"likes\">{this.props.likes}</div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n    </>\r\n  );\r\n}\r\n}\r\n\r\nexport default Status;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from 'react-bootstrap/form'\r\nimport Button from 'react-bootstrap/button'\r\nimport toastr from 'toastr';\r\nimport 'toastr/build/toastr.min.css';\r\n\r\n\r\nclass Update extends React.Component{\r\n  constructor(props){\r\n  super(props)\r\n  this.state = {\r\n    username: \"\",\r\n    status: \"\",\r\n  }\r\n  toastr.options = {\r\n    \"closeButton\": true,\r\n    \"debug\": false,\r\n    \"newestOnTop\": false,\r\n    \"progressBar\": false,\r\n    \"positionClass\": \"toast-top-right\",\r\n    \"preventDuplicates\": false,\r\n    \"onclick\": null,\r\n    \"showDuration\": \"300\",\r\n    \"hideDuration\": \"1000\",\r\n    \"timeOut\": \"5000\",\r\n    \"extendedTimeOut\": \"1000\",\r\n    \"showEasing\": \"swing\",\r\n    \"hideEasing\": \"linear\",\r\n    \"showMethod\": \"show\",\r\n    \"hideMethod\": \"fadeOut\"\r\n  }\r\n  }\r\n  \r\n  handleChange(event){\r\n    const newState = {};\r\n    newState[event.target.name] = event.target.value;\r\n    this.setState(newState)\r\n  }\r\n\r\n  id = 1;\r\n\r\n  submitHandler(event){\r\n    event.preventDefault();\r\n    this.props.onpost(this.id, this.state.username, this.state.status, 0);\r\n    toastr.success(\"You should be able to view this on the timeline\", \"Posted!\");\r\n    this.setState({\r\n      username: \"\",\r\n      status: \"\",\r\n    });\r\n    this.id ++;\r\n  }\r\n\r\n  render(){\r\n  return (\r\n    <>\r\n    \r\n    <Form onSubmit = {(e) => this.submitHandler(e)} className = \"updateform\"> \r\n\r\n      <Form.Group controlId = \"username\">\r\n        <Form.Control name = \"username\" type = \"text\" value = {this.state.username} placeholder=\"Username\" onChange = {(e) => this.handleChange(e)} required />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId = \"status\"> \r\n        <Form.Control name = \"status\" type = \"text\" value = {this.state.status} placeholder=\"Status\" onChange = {(e) => this.handleChange(e)} required />\r\n      </Form.Group>\r\n\r\n      <Button variant = \"outline-light\" type = \"submit\">Post</Button>\r\n\r\n    </Form>\r\n    </>\r\n  );\r\n}\r\n}\r\n\r\nexport default Update;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/container';\nimport Nav from 'react-bootstrap/nav';\nimport Navbar  from 'react-bootstrap/Navbar';\nimport Status from './components/StatusCard';\nimport Update from './components/UpdateStatus';\nimport {HashRouter as Router,\n  Switch,\n  Route,\n  Link\n  } from \"react-router-dom\";\nimport './App.scss';\n\nclass App extends React.Component{\n  constructor(props){\n  super(props)\n  this.state = {\n    posts:[]\n    }\n  }\n\n  createposts() {\n    return this.state.posts.map((current,i) => (\n      < Status key = {i} id = {current.id} username = {current.username} status = {current.status} likes = {current.likes} increaseLikes = {(key) => this.increaseLikes(current.id)} decreaseLikes = {(key) => this.decreaseLikes(current.id)}/>\n    ))\n  }\n\n  updateStatus(id,username, status, likes){\n    const newPost = {id, username, status, likes}\n    this.setState((state)=>({\n      posts: state.posts.concat(newPost)\n    }), () => {localStorage.setItem(\"posts\", JSON.stringify(this.state.posts))})\n  }\n\n  increaseLikes(id){\n    this.state.posts.forEach((item) => {\n      if (item.id === id) {\n        return {...item,\n        likes: item.likes ++\n        }\n      }\n    })\n    this.setState((state) => ({\n      posts: state.posts\n    }), () => {localStorage.setItem(\"posts\", JSON.stringify(this.state.posts))})\n  }\n\n  decreaseLikes(id){\n    this.state.posts.forEach((item) => {\n      if (item.id === id) {\n        return {...item,\n        likes: item.likes --\n        }\n      }\n    })\n    this.setState((state) => ({\n      posts: state.posts\n    }), () => {localStorage.setItem(\"posts\", JSON.stringify(this.state.posts))})\n  }\n\n  componentDidMount () {\n    const postsContents = localStorage.getItem(\"posts\");\n    this.setState(\n      {posts: JSON.parse(postsContents) || [{id:0, username:\"Daniel Thomas\", status:\"Hello World!\", likes:0}]}\n    )\n  }\n\n  render(){\n  return (\n    <>\n    <Router>\n      <Navbar bg=\"light\" expand=\"md\" className = \"nav\">\n        <Navbar.Brand>FakeBook</Navbar.Brand>\n        <Navbar.Toggle aria-controls = \"basic-navbar-nav\" />\n        <Navbar.Collapse id= \"basic-navbar-controls\">\n          <Nav className = \"mr-auto navlinks\">\n            <div className = \"navlinks\">\n              <Link to = \"/\">Timeline</Link>\n              <Link to = \"/update\">New</Link>\n            </div>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <Container className=\"main\">\n        <Switch>\n          <Route path =\"/update\">\n            <Update onpost = {(id,username, status, likes) => this.updateStatus(id,username, status, likes)} />\n          </Route>\n          <Route exact path = \"/\">\n            {this.createposts()}\n          </Route>\n          <Route path = \"/\">\n            <h1>ERROR 404 NOT FOUND</h1>\n          </Route>\n        {/* <pre>{JSON.stringify(this.state)}</pre> */}\n        </Switch>\n      </Container>\n    </Router>\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}