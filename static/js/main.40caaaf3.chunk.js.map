{"version":3,"sources":["components/StatusCard.js","components/UpdateStatus.js","App.js","serviceWorker.js","index.js"],"names":["Status","props","state","Card","className","Row","Col","this","username","md","status","Button","variant","onClick","increaseLikes","decreaseLikes","likes","React","Component","Update","id","toastr","options","event","newState","target","name","value","setState","preventDefault","onpost","info","Form","onSubmit","e","submitHandler","Group","controlId","Label","Control","type","onChange","handleChange","required","App","posts","reverse","map","current","i","key","newPost","concat","forEach","item","Navbar","bg","expand","Brand","Container","updateStatus","createposts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40caaaf3.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Card from 'react-bootstrap/card'\r\nimport Button from 'react-bootstrap/button';\r\nimport Row from 'react-bootstrap/row';\r\nimport Col from 'react-bootstrap/col';\r\n\r\n\r\nclass Status extends React.Component{\r\n  constructor(props){\r\n  super(props)\r\n  this.state = {}\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n  return (\r\n    <>\r\n    <Card className = \"statusCard\">\r\n      <Row>\r\n        <Col>\r\n          <h2>{this.props.username}</h2>\r\n        </Col>\r\n      </Row>\r\n      <Row className = \"justify-content-md-center\">\r\n        <Col md=\"auto\">\r\n          <h4>{this.props.status}</h4>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={11}>\r\n          {/* empty column */}\r\n        </Col>\r\n        <Col md={1}>\r\n        <div className=\"buttonbox\">\r\n          <Button variant = \"outline-primary\" onClick = {() => this.props.increaseLikes()}>▲</Button>\r\n          <Button variant = \"outline-primary\" onClick = {() => this.props.decreaseLikes()}>▼</Button>\r\n          <div className=\"likes\">{this.props.likes}</div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n    </>\r\n  );\r\n}\r\n}\r\n\r\nexport default Status;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from 'react-bootstrap/form'\r\nimport Button from 'react-bootstrap/button'\r\nimport toastr from 'toastr';\r\nimport 'toastr/build/toastr.min.css';\r\n\r\n\r\nclass Update extends React.Component{\r\n  constructor(props){\r\n  super(props)\r\n  this.state = {\r\n    username: \"\",\r\n    status: \"\",\r\n  }\r\n  toastr.options = {\r\n    \"closeButton\": true,\r\n    \"debug\": false,\r\n    \"newestOnTop\": false,\r\n    \"progressBar\": false,\r\n    \"positionClass\": \"toast-top-right\",\r\n    \"preventDuplicates\": false,\r\n    \"onclick\": null,\r\n    \"showDuration\": \"300\",\r\n    \"hideDuration\": \"1000\",\r\n    \"timeOut\": \"5000\",\r\n    \"extendedTimeOut\": \"1000\",\r\n    \"showEasing\": \"swing\",\r\n    \"hideEasing\": \"linear\",\r\n    \"showMethod\": \"fadeIn\",\r\n    \"hideMethod\": \"fadeOut\"\r\n  }\r\n  }\r\n  \r\n  handleChange(event){\r\n    const newState = {};\r\n    newState[event.target.name] = event.target.value;\r\n    this.setState(newState)\r\n  }\r\n\r\n  id = 0;\r\n\r\n  submitHandler(event){\r\n    event.preventDefault();\r\n    this.props.onpost( this.id, this.state.username, this.state.status, 0);\r\n    toastr.info(\"You should be able to view this on the timeline\", \"Posted!\");\r\n    this.setState({\r\n      username: \"\",\r\n      status: \"\",\r\n    });\r\n    this.id ++;\r\n  }\r\n\r\n  render(){\r\n  return (\r\n    <>\r\n    <Form onSubmit = {(e) => this.submitHandler(e)}> \r\n\r\n      <Form.Group controlId = \"username\">\r\n        <Form.Label>Username</Form.Label>\r\n        <Form.Control name = \"username\" type = \"text\" value = {this.state.username} onChange = {(e) => this.handleChange(e)} required />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId = \"status\"> \r\n        <Form.Label>Status</Form.Label>\r\n        <Form.Control name = \"status\" type = \"text\" value = {this.state.status} onChange = {(e) => this.handleChange(e)} required />\r\n      </Form.Group>\r\n\r\n      <Button variant = \"outline-primary\" type = \"submit\">Post</Button>\r\n\r\n    </Form>\r\n    </>\r\n  );\r\n}\r\n}\r\n\r\nexport default Update;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/container';\nimport Navbar  from 'react-bootstrap/Navbar';\nimport Status from './components/StatusCard';\nimport Update from './components/UpdateStatus';\nimport './App.scss';\n\nclass App extends React.Component{\n  constructor(props){\n  super(props)\n  this.state = {\n    posts:[]\n  }\n  }\n\n  createposts() {\n    return this.state.posts.reverse().map((current,i) => (\n      < Status key = {i} id = {current.id} username = {current.username} status = {current.status} likes = {current.likes} increaseLikes = {(key) => this.increaseLikes(current.id)} decreaseLikes = {(key) => this.decreaseLikes(current.id)}/>\n    ))\n  }\n\n  updateStatus(id,username, status, likes){\n    const newPost = {id, username, status, likes}\n    this.setState((state)=>({\n      posts: state.posts.concat(newPost)\n    }))\n  }\n\n  increaseLikes(id){\n    this.state.posts.forEach((item) => {\n      if (item.id === id) {\n        return {...item,\n        likes: item.likes ++\n        }\n      }\n    })\n    this.setState((state) => ({\n      posts: state.posts\n    }))\n  }\n\n  decreaseLikes(id){\n    this.state.posts.forEach((item) => {\n      if (item.id === id) {\n        return {...item,\n        likes: item.likes --\n        }\n      }\n    })\n    this.setState((state) => ({\n      posts: state.posts\n    }))\n  }\n\n  render(){\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"md\">\n        <Navbar.Brand>FakeBook</Navbar.Brand>\n      </Navbar>\n\n      <Container className = \"update_status_container\">\n        <Update onpost = {(id,username, status, likes) => this.updateStatus(id,username, status, likes)} />\n      </Container>\n\n      <Container className = \"status_card_container\">\n        {this.createposts()}\n      </Container>\n      {/* <pre>{JSON.stringify(this.state)}</pre> */}\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}